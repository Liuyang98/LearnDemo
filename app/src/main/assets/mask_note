
性能优化


md5 base64

synchronized lock

ArrayList copyof


ArrayList 底层是数组，    
LinkedList，底层无数组， Node (item, prev ,next) 双向链表，类中存了头尾 first ，last 

红黑树。
HashMap和HashTable，

TreeMap HashMap

Android优化项

Java双亲委派 类加载机制 垃圾回收  多线程   新生代-复制清理 老年代-标记清理   JVM OOM排查

强软弱虚

和ArrayList和Vector一样，同样的类似关系的类还有HashMap和HashTable，StringBuilder和StringBuffer，
后者是前者线程安全版本的实现。希望以后大家在面试过程中，能说出个因为所以，而不是一味的去背面试题，唯有理解，无需再背。







Socket：

服务端监听端口，阻塞，等待连接
客户端根据IP和端口号，连接到指定的server，通过Socket获取输出流，并且向其输出内容


socket.close() 或者调用socket.shutdownOutput();方法。调用这俩个方法，都会结束客户端socket。但是有本质的区别。
socket.close() 将socket关闭连接，那边如果有服务端给客户端反馈信息，此时客户端是收不到的。
而socket.shutdownOutput()是将输出流关闭，此时，如果服务端有信息返回，则客户端是可以正常接受的

服务端在接受到客户端关闭流的信息后，知道信息输入已经完毕，Socket就能正常读取到客户端传过来的数据


上面的示例中scoket客户端和服务端固然可以通信，但是客户端每次发送信息后socket就需要关闭，下次如果需要发送信息，需要socket从新启动，这显然是无法适应生产环境的需要。
比如在我们是实际应用中QQ，如果每次发送一条信息，就需要重新登陆QQ，我估计这程序不是给人设计的，那么如何让服务可以连续给服务端发送消息？下面我们通过while循环进行简单展示：


while (true){
    String str = bufferedReader.readLine();           
    bufferedWriter.write(str);           
    bufferedWriter.write("\n");           
    bufferedWriter.flush();         
 }


大家看到没有，我客户端没有写socket.close() 或者调用socket.shutdownOutput();服务端是如何知道客户端已经输入完成了？服务端接受数据的时候是如何判断客户端已经输入完成呢？
这就是一个核心点，双方约定一个标识，当客户端发送一个标识给服务端时，表明客户端端已经完成一个数据的载入。
而服务端在结束数据的时候，也通过这个标识进行判断，如果接受到这个标识，表明数据已经传入完成，那么服务端就可以将数据度入后显示出来




6.1 长连接

指在一个连接上可以连续发送多个数据包，在连接保持期间，如果没有数据包发送，需要双方发链路检测包。整个通讯过程，客户端和服务端只用一个Socket对象，长期保持Socket的连接。

6.2 短连接

短连接服务是每次请求都建立链接，交互完之后关闭链接